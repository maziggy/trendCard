class TrendCard extends HTMLElement {
    constructor() {
        super();
        this.lastStates = {}; // To store previous states and avoid redundant updates
    }

    setConfig(config) {
        this.config = config;

        const root = this.attachShadow({ mode: "open" });
        root.innerHTML = `
            <style>
                .main-container {
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                    width: 100%;
                    color: #ffffff;
                    background-color: #2c2c2e;
                    border-radius: 10px;
                    padding: 12px;
                    box-shadow: 2px 4px 10px rgba(0, 0, 0, 0.2);
                    position: relative;
                    box-sizing: border-box;
                    overflow: hidden;
                }

                .header-container {
                    display: flex;
                    align-items: center;
                    justify-content: space-between;
                    width: 100%;
                    margin-bottom: 8px;
                }

                .header {
                    font-size: 14px;
                    font-weight: bold;
                    margin-left: 8px;
                }

                .metrics {
                    display: flex;
                    align-items: center;
                    gap: 6px;
                }

                .metric-item {
                    display: flex;
                    align-items: center;
                    cursor: pointer; /* Indicates the metric is clickable */
                }

                .metric-item .icon {
                    color: #f5b200;
                    font-size: 12px;
                    margin-right: 4px;
                }

                .metric-item span {
                    color: #ffffff;
                    font-size: 12px;
                }

                .progress-bar-container {
                    display: flex;
                    align-items: center;
                    width: 120px;
                    margin-left: 8px;
                }

                .progress-labels,
                .progress-max-label {
                    font-size: 12px;
                    color: #ffffff;
                    margin: 0 6px;
                }

        .progress-bar {
          height: 8px;
          background-color: #3a3a3c; /* Solid dimmed background for "off" state */
          border-radius: 4px;
          overflow: hidden;
          flex-grow: 1;
          position: relative;
        }

        .progress-bar-fill {
                background-color: #f5b200; /* Solid yellow color */
                height: 100%;
                width: 0;
                transition: width 0.5s ease;
                border-radius: 4px;
                position: relative;
                overflow: hidden;
        }

        .progress-bar-fill::before {
                content: "";
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background-image: linear-gradient(
                        135deg,
                        rgba(0, 0, 0, 0.2) 25%,
                        transparent 25%,
                        transparent 50%,
                        rgba(0, 0, 0, 0.2) 50%,
                        rgba(0, 0, 0, 0.2) 75%,
                        transparent 75%,
                        transparent
                );
                background-size: 10px 10px; /* Adjusts the scale of the stripes */
                opacity: 0.6; /* Darker texture overlay */
                pointer-events: none;
        }

                .trend-cards {
                    display: flex;
                    justify-content: space-between;
                    width: 100%;
                    margin-top: 12px;
                    gap: 8px;
                    padding: 0 10px;
                    box-sizing: border-box;
                }

                .trend-card {
                    background-color: #333333;
                    border-radius: 20px;
                    padding: 6px 10px;
                    display: flex;
                    align-items: center;
                    justify-content: flex-start;
                    text-align: center;
                    flex: 1;
                    min-width: 90px;
                    color: #d0d0d0;
                    box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.5);
                    cursor: pointer; /* Indicate that the trend card is clickable */
                }

                .trend-card .icon {
                    font-size: 13px;
                    color: #4ff24b;
                    margin-right: 5px;
                }

                .trend-card .value {
                    font-size: 13px;
                    font-weight: bold;
                    margin-right: 4px;
                }

                .trend-card .label {
                    font-size: 13px;
                    font-weight: bold;
                    color: #d0d0d0;
                    margin-left: 5px;
                }
            </style>

            <div class="main-container">
                <div class="header-container">
                    <div class="header">Trend</div>
                    <div class="metrics">
                        <div class="metric-item" id="interval-metric">
                            <ha-icon class="icon" icon="mdi:eye"></ha-icon>
                            <span id="interval-value">10</span>
                        </div>
                        <div class="metric-item" id="steps-metric">
                            <ha-icon class="icon" icon="mdi:database"></ha-icon>
                            <span id="steps-value">6</span>
                        </div>
                        <div class="progress-bar-container">
                            <span class="progress-labels" id="progress-current">0</span>
                            <div class="progress-bar">
                                <div class="progress-bar-fill" id="progress-fill"></div>
                            </div>
                            <span class="progress-max-label" id="progress-max">6</span>
                        </div>
                    </div>
                </div>

                <div class="trend-cards">
                    <div class="trend-card" id="temp-card">
                        <ha-icon class="icon" id="temp-icon" icon="mdi:equal"></ha-icon>
                        <div class="value" id="temp-delta">0.0</div>
                        <div class="label" id="temp-label">Temp</div>
                    </div>

                    <div class="trend-card" id="vpd-card">
                        <ha-icon class="icon" id="vpd-icon" icon="mdi:equal"></ha-icon>
                        <div class="value" id="vpd-delta">0.0</div>
                        <div class="label" id="vpd-label">VPD</div>
                    </div>

                    <div class="trend-card" id="hum-card">
                        <ha-icon class="icon" id="hum-icon" icon="mdi:equal"></ha-icon>
                        <div class="value" id="hum-delta">0.0</div>
                        <div class="label" id="hum-label">Hum</div>
                    </div>
                </div>
            </div>
        `;
    }

    set hass(hass) {
        const config = this.config;

        // Prevent unnecessary updates by comparing the current states with previous ones
        const newState = {
            interval: Math.round(hass.states[config.interval]?.state || 0),
            steps: Math.round(hass.states[config.steps]?.state || 0),
            intervalRemaining: hass.states[config.interval_remaining]?.state || "0/1",
            temperatureDelta: hass.states[config.temperature_delta]?.state || "0.0",
            humidityDelta: hass.states[config.humidity_delta]?.state || "0.0",
            vpdDelta: hass.states[config.vpd_delta]?.state || "0.0"
        };

        if (JSON.stringify(newState) === JSON.stringify(this.lastStates)) return; // Exit if nothing has changed
        this.lastStates = newState; // Update last known states

        // Parse intervalRemaining into current and max
        const [current, max] = newState.intervalRemaining.split("/").map(Number);

        // Update the DOM elements
        this.shadowRoot.getElementById("interval-value").innerText = newState.interval;
        this.shadowRoot.getElementById("steps-value").innerText = newState.steps;
        this.shadowRoot.getElementById("progress-current").innerText = current;
        this.shadowRoot.getElementById("progress-max").innerText = max;
        this.shadowRoot.getElementById("progress-fill").style.width = `${(current / max) * 100}%`;
        this.shadowRoot.getElementById("temp-delta").innerText = newState.temperatureDelta;
        this.shadowRoot.getElementById("vpd-delta").innerText = newState.vpdDelta;
        this.shadowRoot.getElementById("hum-delta").innerText = newState.humidityDelta;

        this.updateLabel("temp-label", hass.states[config.temperature_delta]?.attributes.friendly_name || "Temp");
        this.updateLabel("vpd-label", hass.states[config.vpd_delta]?.attributes.friendly_name || "VPD");
        this.updateLabel("hum-label", hass.states[config.humidity_delta]?.attributes.friendly_name || "Hum");

        this.updateIconColor(this.shadowRoot.getElementById("temp-icon"), newState.temperatureDelta);
        this.updateIconColor(this.shadowRoot.getElementById("vpd-icon"), newState.vpdDelta);
        this.updateIconColor(this.shadowRoot.getElementById("hum-icon"), newState.humidityDelta);
    }

    updateLabel(id, text) {
        const label = this.shadowRoot.getElementById(id);
        if (label && label.innerText !== text) {
            label.innerText = text;
        }
    }

    updateIconColor(iconElement, delta) {
        const value = parseFloat(delta);
        if (value > 0) {
            iconElement.setAttribute("icon", "mdi:arrow-up");
            iconElement.style.color = "#ff4c4c";
        } else if (value < 0) {
            iconElement.setAttribute("icon", "mdi:arrow-down");
            iconElement.style.color = "#498bff";
        } else {
            iconElement.setAttribute("icon", "mdi:equal");
            iconElement.style.color = "#4ff24b";
        }
    }

    _showMoreInfo(entityId) {
        const event = new Event("hass-more-info", { bubbles: true, composed: true });
        event.detail = { entityId };
        this.dispatchEvent(event);
    }

    getCardSize() {
        return 1;
    }
}

// Use a valid custom element name with a hyphen
customElements.define("trend-card", TrendCard);
